version: '3'

dotenv: ['.env']

vars:
  DOCKER_REPO: '{{.DOCKER_REPO}}'
  IMAGE_NAME: '{{.DOCKER_REPO}}/{{.IMAGE_NAME}}'
  DOCKERFILE: '{{.DOCKERFILE}}'
  BUILD_NUMBER: '{{.BUILD_NUMBER}}'
  GITHUB_REPO: '{{.GITHUB_REPO}}'
  USE_CACHE: '{{.USE_CACHE}}'
  BASE_IMAGE: '{{.BASE_IMAGE}}'
  VENV_NAME: '{{.VENV_NAME}}'
  JENKINS_PORT: '{{.JENKINS_PORT}}'
  JENKINS_AGENT_PORT: '{{.JENKINS_AGENT_PORT}}'
  JENKINS_CONTAINER_NAME: '{{.JENKINS_CONTAINER_NAME}}'
  JENKINS_VOLUME_NAME: '{{.JENKINS_VOLUME_NAME}}'

tasks:
  show-config:
    silent: true
    cmds:
      - echo "Current configuration:"
      - "echo DOCKER_REPO: {{.DOCKER_REPO}}"
      - "echo IMAGE_NAME: {{.IMAGE_NAME}}"
      - "echo DOCKERFILE: {{.DOCKERFILE}}"
      - "echo BUILD_NUMBER: {{.BUILD_NUMBER}}"
      - "echo GITHUB_REPO: {{.GITHUB_REPO}}"
      - "echo USE_CACHE: {{.USE_CACHE}}"
      - "echo BASE_IMAGE: {{.BASE_IMAGE}}"
      - "echo VENV_NAME: {{.VENV_NAME}}"
      - "echo JENKINS_PORT: {{.JENKINS_PORT}}"
      - "echo JENKINS_AGENT_PORT: {{.JENKINS_AGENT_PORT}}"
      - "echo JENKINS_CONTAINER_NAME: {{.JENKINS_CONTAINER_NAME}}"
      - "echo JENKINS_VOLUME_NAME: {{.JENKINS_VOLUME_NAME}}"

  build:
    desc: Build the Jenkins Docker image
    deps: [show-config]
    cmds:
      - |
        BUILD_ARGS="--build-arg BASE_IMAGE={{.BASE_IMAGE}}"
        {{if eq .USE_CACHE "false"}}
        BUILD_ARGS="$BUILD_ARGS --no-cache"
        {{end}}
        TAGS="-t {{.IMAGE_NAME}}:latest"
        {{if ne .BUILD_NUMBER ""}}
        TAGS="$TAGS -t {{.IMAGE_NAME}}:{{.BUILD_NUMBER}}"
        {{end}}
        docker build $BUILD_ARGS $TAGS -f {{.DOCKERFILE}} .

  create-venv:
    desc: Create Python virtual environment and install pytest-testinfra
    cmds:
      - |
        if [ ! -d "{{.VENV_NAME}}" ]; then
            echo "Creating virtual environment..."
            python3 -m venv "{{.VENV_NAME}}"
            . "{{.VENV_NAME}}/bin/activate"
            pip install --upgrade pip
            pip install pytest-testinfra
            echo "Virtual environment setup complete."
        else
            echo "Virtual environment already exists."
        fi
    status:
      - test -d {{.VENV_NAME}}

  unit-test:
    desc: Run unit tests using a local running jenkins instance and pytest-testinfra
    deps: [create-venv]
    cmds:
      - |
        set -e
        source ./{{.VENV_NAME}}/bin/activate
        py.test -v tests/test_infra.py
        deactivate

  push:
    desc: Push the image to its registry
    cmds:
      - docker push {{.IMAGE_NAME}}:latest
      - |
        {{if ne .BUILD_NUMBER ""}}
        docker push {{.IMAGE_NAME}}:{{.BUILD_NUMBER}}
        {{end}}

  release:
    desc: Create a GitHub release
    cmds:
      - |
        {{if ne .BUILD_NUMBER ""}}
        gh release create v{{.BUILD_NUMBER}} \
          --title "Release {{.BUILD_NUMBER}}" \
          --notes "Jenkins image release {{.BUILD_NUMBER}}" \
          --repo {{.GITHUB_REPO}}
        {{else}}
        echo "BUILD_NUMBER is not set. Skipping release creation."
        {{end}}

  diff:
    desc: Generate a diff between two OCI container images
    cmds:
      - |
        {{if and .IMAGE1 .IMAGE2}}
        container-diff diff {{.IMAGE1}} {{.IMAGE2}} --type=file --type=size
        {{else}}
        echo "Please provide IMAGE1 and IMAGE2 variables to compare."
        {{end}}

  start-jenkins:
    desc: Start Jenkins container in detached mode
    cmds:
      - |
        docker run -d \
          --name {{.JENKINS_CONTAINER_NAME}} \
          -p {{.JENKINS_PORT}}:8080 \
          -p {{.JENKINS_AGENT_PORT}}:50000 \
          -v {{.JENKINS_VOLUME_NAME}}:/var/jenkins_home \
          -v ${PWD}/tests:/var/jenkins_home/tests:Z \
          -e SETUP_PYTHON_ENV=true \
          {{.IMAGE_NAME}}
      - "echo Jenkins is starting. It will be available at http://localhost:{{.JENKINS_PORT}} once ready."
      - "echo You can view the logs using: 'task view-jenkins-log' OR docker logs -f {{.JENKINS_CONTAINER_NAME}}"
    # status:
    #   - docker ps | grep "{{.JENKINS_CONTAINER_NAME}}"

  stop-jenkins:
    desc: Stop the Jenkins container
    cmds:
      - docker stop {{.JENKINS_CONTAINER_NAME}}
    # status:
    #   - test $(docker ps -q -f name={{.JENKINS_CONTAINER_NAME}} | wc -l) -eq 0

  remove-jenkins:
    desc: Remove the Jenkins container (does not remove the volume)
    cmds:
      - docker rm {{.JENKINS_CONTAINER_NAME}}
    # status:
    #   - test $(docker container ls | grep -q {{.JENKINS_CONTAINER_NAME}}} | wc -l) -eq 0

  remove-jenkins-volume:
    desc: Remove the Jenkins volume
    cmds:
      - docker volume rm {{.JENKINS_VOLUME_NAME}}

  view-jenkins-log:
    desc: View Jenkins container logs
    cmds:
      - docker logs -f {{.JENKINS_CONTAINER_NAME}}

  clean:
    desc: Remove virtual environment and temporary files
    cmds:
      - rm -rf {{.VENV_NAME}}
      - rm -f .pytest_cache
      - rm -f *.pyc
      - echo "Cleaned up virtual environment and temporary files."

  clean-all:
    desc: Remove virtual environment, temporary files, containers, and all volumes
    deps:
      - clean
    cmds:
      - task: remove-jenkins
      - task: remove-jenkins-volume

  all:
    desc: Run all tasks (build, test, push, release)
    cmds:
      - task: build
      - task: test
      - task: push
      - task: release
